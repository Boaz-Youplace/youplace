# -*- coding: utf-8 -*-
"""Boaz_Adv 데이터전처리.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15iEox-cKzA6v-ZGaxpNiMlt8G-MO4qki

https://ebbnflow.tistory.com/292

https://www.dinolabs.ai/288

한글 키워드 추출 시스템: 문서 단위
http://nlp.kookmin.ac.kr/cgi-bin/indexT.cgi

youtube api에서 title, description 가져오기
"""

#!/usr/bin/python

from apiclient.discovery import build
from apiclient.errors import HttpError
from oauth2client.tools import argparser
#from Google import Create_Service

# Set DEVELOPER_KEY to the API key value from the APIs & auth > Registered apps
# tab of
#   https://cloud.google.com/console
# Please ensure that you have enabled the YouTube Data API for your project.
DEVELOPER_KEY = "AIzaSyDweYriWH-xpyKILmBNK1fdg-yx4yA6Azg"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,developerKey=DEVELOPER_KEY)

search_response = youtube.search().list(
q = "애월 vlog",
order = "date",
part = "snippet",
maxResults = 10 #50
).execute()

# video_response = youtube.videos().list(
# q = "제주 동부 vlog",
# order = "date",
# part = "snippet",
# maxResults = 10
# ).execute()

titles = []
descriptions = []

for i in search_response['items']:
  #print(i)
  titles.append(i['snippet']['title'])
  descriptions.append(i['snippet']['description'])
print("title!!!",titles)
print("description!!!",descriptions)
#print(len(titles), len(descriptions))

"""###영어,숫자 및 공백 제거

title
"""

#!/usr/bin/env python
import re

# 새로운 리스트
clear_titles = []
# 텍스트를 가지고 있는 리스트
for i in titles:
    # 영어,숫자 및 공백 제거.
    text = re.sub('[^가-힣]',' ',i).strip() #text = re.sub('[^a-zA-Z0-9가-힣]',' ',i).strip()
    # 빈 리스트는 제거.
    if(text != ''):
        clear_titles.append(text)
print(titles)
print("##")
print(clear_titles)

"""description"""

#!/usr/bin/env python
import re

# 새로운 리스트
clear_descriptions = []
# 텍스트를 가지고 있는 리스트
for i in descriptions:
    # 영어,숫자 및 공백 제거.
    text = re.sub('[^a-zA-Z0-9가-힣]',' ',i).strip()
    # 빈 리스트는 제거.
    if(text != ''):
        clear_descriptions.append(text)
print(descriptions)
print("##")
print(clear_descriptions)

"""###띄어쓰기로만 나눠서 해보기!"""

clear_titles

nouns = []
for i in range (len(clear_titles)):
  nouns.append(clear_titles[i].split())
print(nouns)

# for i in range (len(nouns)):
#   for j in nouns[i]:
#     if "제주" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "VLOG" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "Vlog" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "vlog" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "여행" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "브이로그" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "JEJU" in j:
#       nouns[i].remove(j)
#   for j in nouns[i]:
#     if "eju" in j:
#       nouns[i].remove(j)
# print(nouns)

# '제주도', '제주', 'VLOG' 단어 빼기
for i in range (len(nouns)):
  if "제주도" in nouns[i]:
      nouns[i].remove("제주도")
  if "제주" in nouns[i]:
      nouns[i].remove("제주")
  if "브이로그" in nouns[i]:
      nouns[i].remove("브이로그")
  if "여행" in nouns[i]:
      nouns[i].remove("여행")
  if "JEJU" in nouns[i]:
      nouns[i].remove("JEJU")
  if "Jeju" in nouns[i]:
      nouns[i].remove("Jeju")
  if "jeju" in nouns[i]:
      nouns[i].remove("jeju")
  if "제주" in nouns[i]:
      nouns[i].remove("제주")
  if "VLOG" in nouns[i]:
      nouns[i].remove("VLOG")
  if "Vlog" in nouns[i]:
      nouns[i].remove("Vlog")
  if "vlog" in nouns[i]:
      nouns[i].remove("vlog")
print(nouns)

import requests

info_list = []
for i in range (len(nouns)):
  info = []
  for j in range (len(nouns[i])):
    searching = nouns[i][j]
    url = 'https://dapi.kakao.com/v2/local/search/keyword.json?query={}'.format(searching)
    headers = {
    "Authorization": "KakaoAK de5c6d93b8be1b90b6c34d80949d0d4c"
    }
    places = requests.get(url, headers = headers).json()#['documents']
    print("장소:",searching, ", json:", places['documents'])
    info.append([searching,places['documents']])
  info_list.append(info)

print(info)

print(len(info))

info_list

len(info[0][1])

info_list[0]

info_list[1]

for j in range (len(info_list[i])):
    print(info_list[0][j])

len(info_list[0])

#검색결과 없어서 len=0인 것들 제거
new_info_list = []
new_info_list2 = []
for i in range (len(info_list)):
  for j in range (len(info_list[i])):
    if len(info_list[i][j][1]) != 0:
      new_info_list.append([info_list[i][j][0], info_list[i][j][1]])
  new_info_list2.append(new_info_list)

new_info_list

new_info_list2

new_info_list2[0][0][1][2]['address_name'].split()[0]

"""제주특별자치도 있것만 골라내기
장소(=searching)과 'place_name' 다른 것 삭제하기
"""

jeju_info = []
for i in range (len(info)):
  jeju_json = []
  for j in range (len(info[i][1])):
    #print((info[i][1][j]['address_name'].split())[0])
    if (info[i][1][j]['address_name'].split())[0] == '제주특별자치도':
      if (info[i][0] == info[i][1][j]['place_name']):
        jeju_json.append(info[i][1][j])
        #print(info[i][1][j])
  if len(jeju_json) == 0 :
    continue
  else:
    jeju_info.append([info[i][0], jeju_json])
print(jeju_info)

for i in range (len(jeju_info)):
  print(jeju_info[i][0])

jeju_info = []
real_jeju_info = []
for i in range (len(new_info_list2)):
  for j in range (len(new_info_list2[i])):
    jeju_json = []
    for k in range (len(new_info_list2[i][j])):
      print((new_info_list2[i][j][1][k]['address_name'].split())[0])
  #     if (new_info_list2[i][j][1][k]['address_name'].split())[0] == '제주특별자치도':
  #       if (new_info_list2[i][j][0] == new_info_list2[i][j][1][k]['place_name']):
  #         jeju_json.append(new_info_list2[i][j][1][k])
  #         #print(info[i][1][j])
  #     if len(jeju_json) == 0 :
  #       continue
  #     else:
  #       jeju_info.append([info[i][0], jeju_json])
  #   real_jeju_info.append(jeju_info)
  # print(real_jeju_info)

